package TestFile;

import java.io.IOException;
import java.time.Duration;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;
import Resources.Base;
import page_object.DashboardPageObject;
import page_object.LoginPageObject;

public class LoginPageTest extends Base {

	public WebDriver driver;
	public LoginPageObject lpo;
	public DashboardPageObject dpo;
	
	public String label_invalid_username;
	public String label_invalid_password;
	public String label_valid_username;
	public String label_valid_password;
	
	public static Logger log = LogManager.getLogger(Base.class.getName());
	
	@BeforeMethod()
	public void navigateUrl() throws IOException {
		
		driver = initializeDriver();
		log.info("driver is initialized");
		
		driver.get(prop.getProperty("url"));
		log.info("site url is navigated");
		
		driver.manage().window().maximize();
		log.info("browser window is maximize");
		
		label_invalid_username = prop.getProperty("label_invalid_username");
		label_invalid_password = prop.getProperty("label_invalid_password");
		label_valid_username = prop.getProperty("label_valid_username");
		label_valid_password = prop.getProperty("label_valid_password");
		
		lpo = new LoginPageObject(driver);
		dpo = new DashboardPageObject(driver);
	}
	
	@Test
	public void verify_url() {
		String expectedurl = prop.getProperty("url");
		String currenturl = driver.getCurrentUrl();
		Assert.assertEquals(currenturl,expectedurl);
		log.info("url found is:"+currenturl);
	}
	
	@Test
	public void verify_required_field_alert_is_displayed_for_empty_username_field() {
		lpo.get_password_field().sendKeys(label_invalid_password);
		lpo.get_login_submit().click();
		List<WebElement> required_fields_alert = lpo.get_required_fields_alert();
		for(int i=0; i< required_fields_alert.size();i++) {	
			String fieldName = required_fields_alert.get(i).getText();
			if(fieldName.contains("Username")) {
				int rowIndex = required_fields_alert.size() - 1;
				String requiredLabel = driver.findElement(By.cssSelector("div.orangehrm-login-form > form > div.oxd-form-row > div:nth-Child("+rowIndex+") > span")).getText();
				Assert.assertEquals(requiredLabel,prop.getProperty("label_required_field"));
				log.info("required field alert is displayed for empty username field");
			}
		}
	}
	
	@Test
	public void verify_required_field_alert_is_displayed_for_empty_password_field() {
		lpo.get_username_field().sendKeys(label_invalid_username);
		lpo.get_login_submit().click();
		List<WebElement> required_fields_alert = lpo.get_required_fields_alert();
		for(int i=0; i< required_fields_alert.size();i++) {
			String fieldName = required_fields_alert.get(i).getText();
			if(fieldName.contains("Password")) {
				int rowIndex = required_fields_alert.size() - 1;
				System.out.println(rowIndex);
				String requiredLabel = driver.findElement(By.cssSelector("div.orangehrm-login-form > form > div.oxd-form-row > div:nth-Child("+rowIndex+") > span")).getText();
				Assert.assertEquals(requiredLabel,prop.getProperty("label_required_field"));
				log.info("required field alert is displayed for empty password field");
			}
		}
	}
	
	@Test
	public void verfiy_required_field_alert_is_displayed_for_empty_username_and_password_field() {
		lpo.get_login_submit().click();
		List<WebElement> required_fields_alert = lpo.get_required_fields_alert();
		for(int i=0; i< required_fields_alert.size();i++) {
			String fieldName = required_fields_alert.get(i).getText();
			if(fieldName.contains("Username") && fieldName.contains("Password")) {
				int rowIndex = required_fields_alert.size() - 1;
				System.out.println(rowIndex);
				String requiredLabel = driver.findElement(By.cssSelector("div.orangehrm-login-form > form > div.oxd-form-row > div:nth-Child("+rowIndex+") > span")).getText();
				Assert.assertEquals(requiredLabel,prop.getProperty("label_required_field"));
				log.info("required field alert is displayed for empty username and password field");
			}
		}
	}
	
	@Test
	public void verify_required_field_alert_is_not_displayed_after_refresh() {
		lpo.get_login_submit().click();
		List<WebElement> required_fields_alert = lpo.get_required_fields_alert();
		for(int i=0; i< required_fields_alert.size();i++) {
			String fieldName = required_fields_alert.get(i).getText();
			if(fieldName.contains("Username") && fieldName.contains("Password")) {
				int rowIndex = required_fields_alert.size() - 1;
				System.out.println(rowIndex);
				String requiredLabel = driver.findElement(By.cssSelector("div.orangehrm-login-form > form > div.oxd-form-row > div:nth-Child("+rowIndex+") > span")).getText();
				Assert.assertEquals(requiredLabel,prop.getProperty("label_required_field"));
			}
		}
		
		driver.navigate().refresh();
		List<WebElement> required_fields_alert2 = lpo.get_required_fields_alert();
		for(int i=0; i< required_fields_alert2.size();i++) {
			boolean field_alert_is_displayed = required_fields_alert2.get(i).isDisplayed();	
			if(!field_alert_is_displayed) {
				Assert.assertTrue(true);
				log.info("required field alert is not displayed after refresh");
			}
		}
	}
	
	@Test
	public void verify_user_should_not_able_to_login_with_invalid_credentials() {
		lpo.get_username_field().sendKeys(label_invalid_username);
		lpo.get_password_field().sendKeys("label_invalid_password");
		lpo.get_login_submit().click();
		boolean invalid_cred_alert = lpo.get_alert_field().isDisplayed();
		if(invalid_cred_alert) {
			String alertText = lpo.get_alert_field().getText();
			Assert.assertEquals(alertText,"Invalid credentials");
			log.info("user is not allowed to login with invalid credentials");
		}
	}
	
	@Test
	public void verify_invalid_credentials_alert_is_not_displayed_after_page_refresh() {
		lpo.get_username_field().sendKeys(label_invalid_username);
		lpo.get_password_field().sendKeys(label_invalid_password);
		lpo.get_login_submit().click();
		boolean invalid_cred_alert = lpo.get_alert_field().isDisplayed();
		if(invalid_cred_alert) {
			Assert.assertTrue(true);
		}
		driver.navigate().refresh();
		boolean invalid_cred_alert2 = lpo.get_alert_field().isDisplayed();
		if(invalid_cred_alert2) {
			Assert.assertTrue(false);
			log.info("invalid credentials alert is not displayed after page refresh");
		}
	}
	
	@Test
	public void verify_user_redirects_to_reset_password_page_after_click_on_forgot_password() {
		String linkText = lpo.get_forgot_password_link().getText();
		if(linkText.contains("Forgot your password?")) {
		     lpo.get_forgot_password_link().click();
		}
		String current_url = driver.getCurrentUrl();
		Assert.assertEquals(current_url,prop.getProperty("reset_password"));
		log.info("after click on forgot password, is redirected to reset password page");
	}
	
	
	@Test
	public void verify_user_redirects_to_dashboard_after_login_with_valid_credentials() throws InterruptedException {
		lpo.get_username_field().sendKeys(label_valid_username);
		lpo.get_password_field().sendKeys(label_valid_password);
		lpo.get_login_submit().click();
		 Thread.sleep(5000);
		String url = driver.getCurrentUrl();
		Assert.assertEquals(url,prop.getProperty("dashboard_url"));
		log.info("user is logged-in successfully to dashboard page with valid credentials");
	}
	
	@Test
	public void verify_user_profile_name_for_logged_in_account() {
	   lpo.get_username_field().sendKeys(label_valid_username);
	   lpo.get_password_field().sendKeys(label_valid_password);
	   lpo.get_login_submit().click();
	   
	   String username = dpo.get_user_profile_name_label().getText();
	   WebDriverWait w = new WebDriverWait(driver,Duration.ofSeconds(10));
	   w.until(ExpectedConditions.textToBePresentInElement(dpo.get_user_profile_name_label(),username));
	   Assert.assertEquals(username,"fas safsa");
	   log.info("The logged user profile name is:"+username);
	}
	
	@Test
	public void verify_user_can_logged_out_from_account_successfully() {
		lpo.get_username_field().sendKeys(label_valid_username);
		lpo.get_password_field().sendKeys(label_valid_password);
		lpo.get_login_submit().click();
		   
		String username = dpo.get_user_profile_name_label().getText();
		WebDriverWait w = new WebDriverWait(driver,Duration.ofSeconds(10));
		w.until(ExpectedConditions.textToBePresentInElement(dpo.get_user_profile_name_label(),username));
		   
		dpo.get_user_account_tab().click();
		List<WebElement> myaccountoptions = dpo.get_user_account_list_options();
		for(int i=0; i<myaccountoptions.size();i++) {
		     String optionLabel = myaccountoptions.get(i).getText();
		     if(optionLabel.contains("Logout")) {
		        int rowIndex = myaccountoptions.size();
		        driver.findElement(By.cssSelector("div.oxd-topbar-header-userarea > ul > li > ul > li:nth-Child("+rowIndex+") > a")).click();
		     }
		}
		Assert.assertEquals(driver.getCurrentUrl(),prop.getProperty("url"));
		log.info("user logged out successfully");
	}
	
	@Test
	public void verify_user_after_logout_cannot_access_direct_dashboard_through_url_if_he_tries_redirects_to_login_page() {
		
		lpo.get_username_field().sendKeys(label_valid_username);
		lpo.get_password_field().sendKeys(label_valid_password);
		lpo.get_login_submit().click();
		   
		String username = dpo.get_user_profile_name_label().getText();
		WebDriverWait w = new WebDriverWait(driver,Duration.ofSeconds(10));
		w.until(ExpectedConditions.textToBePresentInElement(dpo.get_user_profile_name_label(),username));
		   
		dpo.get_user_account_tab().click();
		List<WebElement> myaccountoptions = dpo.get_user_account_list_options();
		for(int i=0; i<myaccountoptions.size();i++) {
		     String optionLabel = myaccountoptions.get(i).getText();
		     if(optionLabel.contains("Logout")) {
		        int rowIndex = myaccountoptions.size();
		        driver.findElement(By.cssSelector("div.oxd-topbar-header-userarea > ul > li > ul > li:nth-Child("+rowIndex+") > a")).click();
		     }
		}		
	}
	
	@AfterMethod
	public void afterTest() {
		driver.quit();
		log.info("browser is quit");
	}
}
