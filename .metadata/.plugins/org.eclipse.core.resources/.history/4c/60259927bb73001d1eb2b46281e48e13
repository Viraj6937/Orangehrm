package TestFile;

import java.io.IOException;
import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.testng.Assert;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import Resources.Base;
import page_object.LoginPageObject;

public class LoginPageTest extends Base {

	public WebDriver driver;
	public LoginPageObject lpo;
	
	@BeforeMethod()
	public void navigateUrl() throws IOException {
		
		driver = initializeDriver();
		driver.get(prop.getProperty("url"));
		driver.manage().window().maximize();
		lpo = new LoginPageObject(driver);
	}
	
	@Test
	public void verify_url() {
		String expectedurl = prop.getProperty("url");
		String currenturl = driver.getCurrentUrl();
		Assert.assertEquals(currenturl,expectedurl);
	}
	
	@Test
	public void verify_required_field_alert_is_displayed_for_empty_username_field() {
		lpo.get_password_field().sendKeys("test");
		lpo.get_login_submit().click();
		List<WebElement> required_fields_alert = lpo.get_required_fields_alert();
		for(int i=0; i< required_fields_alert.size();i++) {	
			String fieldName = required_fields_alert.get(i).getText();
			if(fieldName.contains("Username")) {
				int rowIndex = required_fields_alert.size() - 1;
				String requiredLabel = driver.findElement(By.cssSelector("div.orangehrm-login-form > form > div.oxd-form-row > div:nth-Child("+rowIndex+") > span")).getText();
				Assert.assertEquals(requiredLabel,prop.getProperty("label_required_field"));
			}
		}
	}
	
	@Test
	public void verify_required_field_alert_is_displayed_for_empty_password_field() {
		lpo.get_username_field().sendKeys("test");
		lpo.get_login_submit().click();
		List<WebElement> required_fields_alert = lpo.get_required_fields_alert();
		for(int i=0; i< required_fields_alert.size();i++) {
			String fieldName = required_fields_alert.get(i).getText();
			if(fieldName.contains("Password")) {
				int rowIndex = required_fields_alert.size() - 1;
				System.out.println(rowIndex);
				String requiredLabel = driver.findElement(By.cssSelector("div.orangehrm-login-form > form > div.oxd-form-row > div:nth-Child("+rowIndex+") > span")).getText();
				Assert.assertEquals(requiredLabel,prop.getProperty("label_required_field"));
			}
		}
	}
	
	@Test
	public void verfiy_required_field_alert_is_displayed_for_empty_username_and_password_field() {
		lpo.get_login_submit().click();
		List<WebElement> required_fields_alert = lpo.get_required_fields_alert();
		for(int i=0; i< required_fields_alert.size();i++) {
			String fieldName = required_fields_alert.get(i).getText();
			if(fieldName.contains("Username") && fieldName.contains("Password")) {
				int rowIndex = required_fields_alert.size() - 1;
				System.out.println(rowIndex);
				String requiredLabel = driver.findElement(By.cssSelector("div.orangehrm-login-form > form > div.oxd-form-row > div:nth-Child("+rowIndex+") > span")).getText();
				Assert.assertEquals(requiredLabel,prop.getProperty("label_required_field"));
			}
		}
	}
	
	@Test
	public void verify_required_field_alert_is_not_displayed_after_refresh() {
		lpo.get_login_submit().click();
		List<WebElement> required_fields_alert = lpo.get_required_fields_alert();
		for(int i=0; i< required_fields_alert.size();i++) {
			String fieldName = required_fields_alert.get(i).getText();
			if(fieldName.contains("Username") && fieldName.contains("Password")) {
				int rowIndex = required_fields_alert.size() - 1;
				System.out.println(rowIndex);
				String requiredLabel = driver.findElement(By.cssSelector("div.orangehrm-login-form > form > div.oxd-form-row > div:nth-Child("+rowIndex+") > span")).getText();
				Assert.assertEquals(requiredLabel,prop.getProperty("label_required_field"));
			}
		}
		
		driver.navigate().refresh();
		List<WebElement> required_fields_alert2 = lpo.get_required_fields_alert();
		for(int i=0; i< required_fields_alert2.size();i++) {
			boolean field_alert_is_displayed = required_fields_alert2.get(i).isDisplayed();	
			if(!field_alert_is_displayed) {
				Assert.assertTrue(true);
			}
		}
	}
	
	@Test
	public void verify_user_should_not_able_to_login_with_invalid_credentials() {
		lpo.get_username_field().sendKeys("test");
		lpo.get_password_field().sendKeys("test");
		lpo.get_login_submit().click();
		boolean invalid_cred_alert = lpo.get_alert_field().isDisplayed();
		if(invalid_cred_alert) {
			String alertText = lpo.get_alert_field().getText();
			Assert.assertEquals(alertText,"Invalid credentials");
		}
	}
	
	@Test
	public void verify_invalid_credentials_alert_is_not_displayed_after_page_refresh() {
		lpo.get_username_field().sendKeys("test");
		lpo.get_password_field().sendKeys("test");
		lpo.get_login_submit().click();
		boolean invalid_cred_alert = lpo.get_alert_field().isDisplayed();
		if(invalid_cred_alert) {
			Assert.assertTrue(true);
		}
		driver.navigate().refresh();
		boolean invalid_cred_alert2 = lpo.get_alert_field().isDisplayed();
		if(invalid_cred_alert2) {
			Assert.assertTrue(false);
		}
	}
	
	@Test
	public void verify_user_redirects_to_reset_password_page_after_click_on_forgot_password() {
		String linkText = lpo.get_forgot_password_link().getText();
		if(linkText.contains("Forgot your password?")) {
		     lpo.get_forgot_password_link().click();
		}
		String current_url = driver.getCurrentUrl();
		Assert.assertEquals(current_url,prop.getProperty("reset_password"));
	}
	
	
	@AfterMethod
	public void afterTest() {
		driver.quit();
	}
}
