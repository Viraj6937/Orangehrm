package TestFile;

import java.io.IOException;
import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.testng.Assert;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import Resources.Base;
import page_object.LoginPageObject;

public class LoginPageTest extends Base {

	public WebDriver driver;
	public LoginPageObject lpo;
	
	@BeforeMethod()
	public void navigateUrl() throws IOException {
		
		driver = initializeDriver();
		driver.get(prop.getProperty("url"));
		driver.manage().window().maximize();
		lpo = new LoginPageObject(driver);
	}
	
	@Test
	public void verify_url() {
		String expectedurl = prop.getProperty("url");
		String currenturl = driver.getCurrentUrl();
		Assert.assertEquals(currenturl,expectedurl);
	}
	
	@Test
	public void verify_required_field_alert_is_displayed_for_empty_username_field() {
		lpo.get_password_field().sendKeys("test");
		lpo.get_login_submit().click();
		List<WebElement> required_fields_alert = lpo.get_required_fields_alert();
		for(int i=0; i< required_fields_alert.size();i++) {	
			String fieldName = required_fields_alert.get(i).getText();
			if(fieldName.contains("Username")) {
				int rowIndex = required_fields_alert.size() - 1;
				System.out.println(rowIndex);
				String requiredLabel = driver.findElement(By.cssSelector("div.orangehrm-login-form > form > div.oxd-form-row > div:nth-Child("+rowIndex+") > span")).getText();
				Assert.assertEquals(requiredLabel,prop.getProperty("label_required_field"));
			}
		}
	}
	
	@Test
	public void verify_required_field_alert_is_displayed_for_empty_password_field() {
		lpo.get_username_field().sendKeys("test");
		lpo.get_login_submit().click();
		List<WebElement> required_fields_alert = lpo.get_required_fields_alert();
		for(int i=0; i< required_fields_alert.size();i++) {
			
		}
	}

	@AfterMethod
	public void afterTest() {
		driver.quit();
	}
}
